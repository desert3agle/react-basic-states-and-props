{"version":3,"sources":["Highscore.js","Newproj.js","serviceWorker.js","index.js"],"names":["Highscore","this","props","overTen","onClick","resetButton","Component","Newproj","handleClick","setState","count","state","console","log","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4NAwBeA,E,uKAnBP,OAAGC,KAAKC,MAAMC,QAEN,6BACI,kDACA,4BAAQC,QAAUH,KAAKC,MAAMG,aAA7B,UAUD,S,GAhBKC,aC4DTC,G,wDA1DX,WAAYL,GAAO,IAAD,8BACd,cAAMA,IAmBVM,YAAc,WACV,EAAKC,SAAS,CAACC,MAAO,EAAKC,MAAMD,MAAQ,KArB3B,EAuBlBL,YAAc,WACV,EAAKI,SAAS,CAACC,MAAO,EAAGP,SAAS,KAtBlC,EAAKQ,MAAQ,CACTD,MAAQ,EACRP,SAAS,GAJC,E,+DAOCD,EAAOS,GAItBC,QAAQC,IAAI,aAAcF,EAAMD,MAAOT,KAAKU,MAAMD,OAC/CT,KAAKU,MAAMD,MAAQ,IAAMT,KAAKU,MAAMD,OAASC,EAAMD,OAA+B,GAAtBT,KAAKU,MAAMR,SACtEF,KAAKQ,SAAS,CAACN,SAAU,M,0CAGbD,EAAOS,GAEvBC,QAAQC,IAAI,cAAcF,EAAMD,MAAOT,KAAKU,MAAMD,S,+BAQ7C,IACAA,EAAST,KAAKU,MAAdD,MAEL,OACI,6BAQI,wBAAII,UAAU,WAAd,gCAAsDJ,GACtD,kBAAC,EAAD,CACIP,QAAWF,KAAKU,MAAMR,QACtBE,YAAeJ,KAAKI,cAMxB,6BACI,4BAAQS,UAAY,MAAMV,QAAWH,KAAKO,aAA1C,mB,GAjDEF,cCQFS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,a","file":"static/js/main.45215c8e.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\n// mistakes were render(); and no writing return in null part\nclass Highscore extends Component{\n    render(){\n        if(this.props.overTen){\n            return(\n                <div>\n                    <h3>High score wohoo!!</h3>\n                    <button onClick ={this.props.resetButton}>Reset</button>\n                    {/*(e) show action funtion. it will acess as prop from parent \n                        component. which will change the state of prent component\n                        (e) => this.state/props.name() or this this.state/props.name \n                        are equiv. doesn't matter where you use what.\n                    */}\n                </div>\n            );\n        }\n        else {\n            return null;\n        }\n    }\n}\n\nexport default Highscore;","import React, {Component} from 'react';\nimport Highscore from './Highscore';\nimport './style/stylesheet.css';\n\nclass Newproj extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            count : 0, \n            overTen: false\n        }\n    }\n    componentDidUpdate(props, state){\n        // prop are new prop , state is old \n        // props and states are objects\n        // did update me state.name purana as it did update. this.state.name naya .. as it updated\n        console.log(\"did update\", state.count, this.state.count);\n        if(this.state.count > 10 && this.state.count != state.count && this.state.overTen == false){\n            this.setState({overTen : true});\n        }\n    }\n    componentWillUpdate(props, state){\n        // will update me state.name naya, this.state.name purana , as it will update\n        console.log(\"will update\",state.count, this.state.count);\n    }\n    handleClick = () => {\n        this.setState({count: this.state.count + 1});\n    }\n    resetButton = () => {\n        this.setState({count: 0, overTen: false});\n    }\n    render(){\n        let {count} = this.state;\n        \n        return(\n            <div>\n                {\n                    // learned self closing tag diff, className, () => this.fun(), single jsx return, \n                    // recursion in component did update. to prevent it\n                    // writing conditions in html\n                    // onclicsk action\n                }\n\n                <h1 className=\"heading\">No of times button clicked : {count}</h1>\n                <Highscore \n                    overTen = {this.state.overTen}\n                    resetButton = {this.resetButton}\n                />\n                {/*(e) => this.resetButton() is eqv to this.resetButton\n                    since don't have to pass anything. it will capture the event 'e'\n                    which you don't write its ok.\n                */}\n                <div>\n                    <button className = \"one\" onClick = {this.handleClick}>\n                        Click me!\n                    </button>\n                    \n                    {/*mistake : span one*/}\n                </div>\n            </div>\n        );\n    }\n}\nexport default Newproj;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Newproj from './Newproj.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Newproj />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}